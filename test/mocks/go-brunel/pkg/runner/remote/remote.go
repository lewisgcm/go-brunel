// Code generated by MockGen. DO NOT EDIT.
// Source: go-brunel/internal/pkg/runner/remote (interfaces: Remote)

// Package remote is a generated GoMock package.
package remote

import (
	gomock "github.com/golang/mock/gomock"
	shared "go-brunel/internal/pkg/shared"
	reflect "reflect"
)

// MockRemote is a mock of Remote interface
type MockRemote struct {
	ctrl     *gomock.Controller
	recorder *MockRemoteMockRecorder
}

// MockRemoteMockRecorder is the mock recorder for MockRemote
type MockRemoteMockRecorder struct {
	mock *MockRemote
}

// NewMockRemote creates a new mock instance
func NewMockRemote(ctrl *gomock.Controller) *MockRemote {
	mock := &MockRemote{ctrl: ctrl}
	mock.recorder = &MockRemoteMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRemote) EXPECT() *MockRemoteMockRecorder {
	return m.recorder
}

// AddContainer mocks base method
func (m *MockRemote) AddContainer(arg0 shared.JobID, arg1 shared.ContainerID, arg2 shared.ContainerMeta, arg3 shared.Container, arg4 shared.ContainerState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddContainer", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddContainer indicates an expected call of AddContainer
func (mr *MockRemoteMockRecorder) AddContainer(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddContainer", reflect.TypeOf((*MockRemote)(nil).AddContainer), arg0, arg1, arg2, arg3, arg4)
}

// ContainerLog mocks base method
func (m *MockRemote) ContainerLog(arg0 shared.ContainerID, arg1 string, arg2 shared.LogType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerLog", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ContainerLog indicates an expected call of ContainerLog
func (mr *MockRemoteMockRecorder) ContainerLog(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerLog", reflect.TypeOf((*MockRemote)(nil).ContainerLog), arg0, arg1, arg2)
}

// GetNextAvailableJob mocks base method
func (m *MockRemote) GetNextAvailableJob() (*shared.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNextAvailableJob")
	ret0, _ := ret[0].(*shared.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNextAvailableJob indicates an expected call of GetNextAvailableJob
func (mr *MockRemoteMockRecorder) GetNextAvailableJob() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNextAvailableJob", reflect.TypeOf((*MockRemote)(nil).GetNextAvailableJob))
}

// HasBeenCancelled mocks base method
func (m *MockRemote) HasBeenCancelled(arg0 shared.JobID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasBeenCancelled", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasBeenCancelled indicates an expected call of HasBeenCancelled
func (mr *MockRemoteMockRecorder) HasBeenCancelled(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasBeenCancelled", reflect.TypeOf((*MockRemote)(nil).HasBeenCancelled), arg0)
}

// Log mocks base method
func (m *MockRemote) Log(arg0 shared.JobID, arg1 string, arg2 shared.LogType, arg3 shared.StageID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Log", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Log indicates an expected call of Log
func (mr *MockRemoteMockRecorder) Log(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Log", reflect.TypeOf((*MockRemote)(nil).Log), arg0, arg1, arg2, arg3)
}

// SearchForSecret mocks base method
func (m *MockRemote) SearchForSecret(arg0 []string, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchForSecret", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchForSecret indicates an expected call of SearchForSecret
func (mr *MockRemoteMockRecorder) SearchForSecret(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchForSecret", reflect.TypeOf((*MockRemote)(nil).SearchForSecret), arg0, arg1)
}

// SearchForValue mocks base method
func (m *MockRemote) SearchForValue(arg0 []string, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchForValue", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchForValue indicates an expected call of SearchForValue
func (mr *MockRemoteMockRecorder) SearchForValue(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchForValue", reflect.TypeOf((*MockRemote)(nil).SearchForValue), arg0, arg1)
}

// SetContainerState mocks base method
func (m *MockRemote) SetContainerState(arg0 shared.ContainerID, arg1 shared.ContainerState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetContainerState", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetContainerState indicates an expected call of SetContainerState
func (mr *MockRemoteMockRecorder) SetContainerState(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetContainerState", reflect.TypeOf((*MockRemote)(nil).SetContainerState), arg0, arg1)
}

// SetJobState mocks base method
func (m *MockRemote) SetJobState(arg0 shared.JobID, arg1 shared.JobState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetJobState", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetJobState indicates an expected call of SetJobState
func (mr *MockRemoteMockRecorder) SetJobState(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetJobState", reflect.TypeOf((*MockRemote)(nil).SetJobState), arg0, arg1)
}

// SetStageState mocks base method
func (m *MockRemote) SetStageState(arg0 shared.JobID, arg1 shared.StageID, arg2 shared.StageState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStageState", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetStageState indicates an expected call of SetStageState
func (mr *MockRemoteMockRecorder) SetStageState(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStageState", reflect.TypeOf((*MockRemote)(nil).SetStageState), arg0, arg1, arg2)
}
